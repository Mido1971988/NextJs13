**** NextJs 13 ( Dave-Gary) *****
https://nextjs.org/docs


* why NextJs?
    1.Server-side rendering (SSR):  can improve website performance and user experience by pre-rendering pages and sending fully-formed HTML to the browser.
    2.Automatic code splitting: Next js automatically splits code into smaller chunks, making it easier to load and reducing the time it takes to load the site.
    3.SEO optimization
    4.Faster development: Next js includes many features that can speed up development, such as file-based routing, automatic code splitting, and built-in API routes.
    5.Great developer experience: Next js offers a great developer experience, including hot reloading, automatic code splitting, and easy integration with other popular technologies.
    6.Built-in support for TypeScript
    * note : Hot reload : is a feature that lets you inject updated source code into a running app. This means that you can see the effects of your code changes almost instantly, without waiting for the app to rebuild or relaunch.

* Hydration: 
    Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive.

* SSG ( static site generation ) vs SSR Server-side Rendering : 
    -Static Generation (Recommended): The HTML is generated at build time and will be reused on each request.
    -Server-side Rendering: The HTML is generated on each request.
    * you can use both method and that called hybrid nextJs 

* CDN(content delivery network): 
    CDN is a network of servers linked together with the goal of delivering content as quickly, cheaply, reliably, and securely as possible.

* to insall nextJs : npx create-next-app@latest

* layout.tsx : any code will be written there will be applied to all pages ( in layout.tsx in app folder)
    each page can have specific layout so code inside it will be applied to this specific page only ( in layout.tsx in about folder ).

* Metadata : is availabe at layout.tsx and each page can have layout.tsx file inside it you can add different Metadata ( you can also add Metadata at page.tsx)

* loading : you can add loading.tsx file to any page folder and you will see it if page take too long for loading

* error handling : you can add error.tsx to any page folder and will render it when there is an error and will not crash all project

* Routes : 
    just create folder and the name of folder will be the route name then add page.tsx file inside it

* Dynamic Routes : 
    just create a folder and the name of the folder between [] ( like [userId] inside users folder) :

* types.d.ts : you can create this file and add all types you will need in project and you can use it directly without importing 

* Fetching Data : 
    - you can fetch data inside function inside page.tsx file but it's better for organization add those functions 
    inside lib folder and then import them like ( import getAllUsers from '@/lib/getAllUsers' )

    - in page.tsx of users folder :
        * we fetched data of user and rendered the users name
        * we added Metadata directly at page.tsx
        * const usersData: Promise<User[]> = getAllUsers() 
            because getAllUsers() will return promise and we added <User[]> for types (User type from types.d.ts file)
    
    in page.tsx of [userId] : 
        * we created Dynamic Metadata (generateMetadata function and it's params is userId from Url )
        * we have 2 options to do 2 fetch requests : 
            [1] parallel ( use Promise.all([userData, userPostsData])) will fetch 2 request at same time
            [2] Suspense to progressively render a page and show a result to the user while the rest of the content loads 
                steps of option 2 : 
                    [a] import { Suspense } from "react"
                    [b] wrap the UserPosts component with Suspense component and pass the Promise as prop
                    * note : Suspense component can accept a fallback prop to render it when loading ( fallback={<h2>Loading...</h2>}) 

        * note : in option 1 we will fetch userData, userPostsData at same time so maybe will take a long time
        so option 2 is better because you will fetch userData first to show user.name and Suspense userPostsData to show userPosts when it ready

* in page.tsx in [userId] folder we fetched two times by invoking getUser() function two times 
but in nextjs by default will combine those 2 fetches to one fetch.

- Any <Link /> component will be prefetched by default
    For example : you have home page and have users page 
    When you at home page will not fetch the data untill you go to homepage\users from address bar in browser ( will download html file from server ) 
    But if you add Link to this users page at home page will fetch data when you open home page and you have two options : 
        [1] when you go to users page from address bar will download users html file from the server
        [2] when you click on the link will not download users html file from server will use fetched data to create html at client side
        * note : both 2 options data will be fetched on home page to be ready if you click on the link

* SSG : Static Site Generation
* SSR : Server Site Rendering ( for Dynamic Routes for example)
* ISR : incremental Static Generation ( allows pages to be updated after a site has been built and deployed )

* SSG vs SSR : 
    [1] Static Site Generation is a technique for pre-rendering web pages , during the build process. 
    The generated HTML, CSS, and JavaScript files are then served to the client, 
    resulting in websites loading faster and providing heightened security.

    [2] Server Side Rendering  is a technique where web pages are rendered on the server at request time for each user. 
    This approach allows for dynamic data and interactive content to be generated on-the-fly, 
    providing a more personalized user experience.

* how to change SSR to SSG : 
    for Example you have dynamic routes [userId] so nextjs will consider it as SSR because it does not know 
    the numbers of userId but if you know you can tell nextJs what is the expected userId (by generateStaticParams())
    we created generateStaticParams() function inside page.tsx inside [userId] folder 
    and this function will return array of objects each object has userId prop
    now nextjs knows the expected userId so will convert users/[userId] from SSR to SSG

* 2nd parameter of fetch : 
    [1] fetch(url, {cache: "force-cache"}) this if the defaut Nextjs cache data by default
    [2] fetch(url, {cache: "no-store"}) will not cache data 
    [3] fetch(url, {next: {revalidate : 60 }}) will check every 60 sec if there is updated data or not
        and this can applied to SSG or SSR (this method is called ISR) (in getUserPosts.tsx)

* Revalidation : is the process of purging the Data Cache and re-fetching the latest data. 
    This is useful when your data changes and you want to ensure you show the latest information.
    steps of Revalidation : 
    when you request data for first time will fetch data and for example you added {next: {revalidate : 60 }}
        -if you request data again before 60 sec will give you the data from cache
        -if you request data after 60 sec will fetch a new data

* dynamicParams: you can add export const dynamicParams = false; to page.tsx inside [userId] folder
    so when you try to access page not returned from generateStaticParams() ( like users/999 ) will give you 404 page
    * note: the default value is  dynamicParams = true so you can access any page number because it's dynamic
    * note : maybe is a bug if generateStaticParams()  return({userId:1}, {userId:2} , ...) dynamicParams = false; will work
        but if generateStaticParams()  return(users.map(user=>{userId:user.id.toString()})) dynamicParams = false; will not work

* not-found page : 
    nextjs by default give you 404 not found page if you write wrong url
    but you can override it by creating not-found.tsx inside App folder

    * note : you can show 404 page to dynamic route 
        for example if you write users/999 will render blank page because you are using 
        dynamic route so will accept any number
        but you can use notFound() function : 
            [a] import {notFound} from "next/navigation"
            [b] if(!user.name) return  notFound()
        so when you write users/999 user.name not availabe because so will give you 404 page (or not-found.tsx page if you override it )

* API routes : 
    - you can create api inside directory (app/api/folderName/route.ts)
        export async function GET(){
            return new Response("Hello, nextJs")
            return NextResponse.json("Hello, nextJs")
        }
        * note : instead of returning response.json() we will use NextResponse.json() because response.json() not compatible with TypeScript
        * note : you can use POST or GET
        * note : to test api you can download Thunder Client extension in VSCODE
        * note : we created feedback page.tsx that uses feedback route.ts api (see files to understand)
        * note : Array.protoype.every(Boolean) will check if every element in array is truthy value (const canSave = [...Object.values(data)].every(Boolean) in page.tsx in feddback page folder)

    - we usually use API routes in nextjs to hide secret key or secret URL 
    - if you are fetching data in server component no need to use API routes because already hidden from client side
    - if you want github ignore a file and not upload it to repo add name of file to .gitignore 
    - you can put you API KEY in .env.local file and github will not upload it to reop because it's mentioned in .gitignore file
    - you can add dynamic route folder ( like [id] inside todos folder inside api folder) 
    * note : const { id }: Partial<Todo> ( in route.ts in todos folder) Partial means i can write only id without typescript error no need to write all properties

* difference between PUT , POST , DELETE ? 
    The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server. 
    The PUT method replaces all current representations of the target resource with the request payload. 
    The DELETE method deletes the specified resource

* in GET Method accept 2nd parameter and 2nd parameter is object has property id ( name of dynmaic route) 
    so you can access id instead of accesing it from request.url ( in route.ts inside [id] inside todos folder)
    this is like 2nd parameter in page.tsx in [userId] dynamic in app folder

* Middleware :
    - can modify request headers, response headers, and send responses
    - Middleware returns NextResponse.next() (Returns a NextResponse that will continue the middleware chain)

    - Middleware will be invoked for every route in your project ( for example when you start dev mode 
    of your application Middleware will be invoked for every request so we have to tell Middleware to 
    be invoked only for specific path  and that what Matcher Path do ) 
    - Matcher Path :
    you have two options to do matcher path :
    [1] conditional if : 
        [a] if(request.url.includes("/api/")){} 
        [b] const regex = new Regex("/api/*) if(regex.test(request.url)){} 
    [2] export const config = { matcher = "/api/:path/*}
        * note : :path means api/a or api/b .... but not api/a/b
        * note : :path/* means api/a or api/b or api/a/b

* difference between NextResponse.next() , NextResponse.json() and new NextResponse(JSON.stringify(),{headers}) ?
    [1] NextResponse.next() returned by Middleware to continue the middleware chain
    [2] NextResponse.json() returned by route.ts 
    [3] new NextResponse(JSON.stringify(),{headers}) returned by route.ts if you want 
        to add Access-Control-Allow-Origin headers

* Limiter : install ( npm i limiter)
    It's a tool that controls the rate at which an action can be performed by a user 
    or an IP address. This can prevent a single user from making too many requests in 
    a short period of time and overwhelming the server

    steps : 
        [1] create folder called config inside api folder and create limiter.ts file inside it ( see file to understand)
        [2] import limiter and use it with any route you want (by using limiter.removeTokens(1) at every request) ( we tried it at route.ts inside api/hello)
        * notes : 
            - tokens will be shared if you use limiter for more than one route ( for example if you add 3 
            tokens and use limiter in hello and about route and request 2 times from hello and then request 2 times from about 
            will allow you to request one time only then will give you status 429 too many requests)
            - if you want not to share token you can add limiter.ts file for each route you want
        
* Cross-origin resource sharing (CORS) :
    is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain 
    from which the first resource was served. A web page may freely embed cross-origin images, 
    stylesheets, scripts, iframes, and videos.

* Types of CORS requests: 
    [1] simple requests: GET, POST ( These methods are considered safe because they are not capable of causing a change in state on the server ) 
    [2] PUT , DELETE ( These methods can cause a change in state on the server, so the browser sends a request to the server to check if the request is allowed ) 

* CORS mechanism :
    The CORS mechanism works by adding HTTP headers to cross-origin HTTP requests and responses.
    These headers indicate whether the request or response is allowed to access the resources.

* How does CORS work?
    When a browser sends a request to a server, it includes an Origin header. This header contains the origin of the request, 
    which is the domain, protocol, and port of the page making the request.
    The server can then decide whether to allow or deny the origin of request according to Access-Control-Allow-Origin ( see route.ts in todos Folder). 

- API Routes do not specify CORS headers, meaning they are same-origin only by default.
    so we have to return new NextResponse(JSON.stringify(),{headers:{Access-Control-Allow-Origin:origin we want to allow}})
    
- Thunder client extension does not have origin so will be always allowed so if you want to block it 
    add || !origin to ( if(origin && !allowedOrigins.includes(origin)){} in middleware.ts file ) so will be if(origin && !allowedOrigins.includes(origin) || !origin){}

* The Route Segment Config Options allows you configure the behavior of a Page, Layout by directly exporting the a variable like : 
    [1] const dynamicParams = false;
    [2] const revalidate = 10;

    * Note : if you add revalidate as 2nd parameter of fetch , will override the revalidate of Route Segment Config ( )
    * Note : To test Revalidation test it in build mode not dev mode 
    * Note : when you change data on server and set revalidation=10 after 10 secs when you refresh the page , the page will not be updated with new data , will be updated with 2nd refresh , why ? 
    Because 1st refresh will trigger revalidation and 2nd refresh get the new version and to solve this issue you have to do on-demand revalidation .

* On-demand revalidation  : 
    [1] create revalidate.ts file inside pages/api 
    [2] request it by this link for example ( http://localhost:3000/api/revalidate?path=/&secret=DaveGrayTeachesCode ) 
        * note : we added secret key in .env.local file 
        now we triggered revalidation so when new data added to server wil be shown on page with 1st refresh not 2nd refresh
        * note : On-demand revalidation used when you want only users who has secret token to see updated data


* Data Mutation : 
    is a common side-effect in programming. 
    To mutate a variable once it has been defined means to alter its value.
    here in NextJs we means by data mutation is changing data from server after page is rendered
    
* note : To get updated data immediately you have 2 options ( on 2nd parameter on fetch ) or Route Segment Config: 
    [1] { cache :  ‘no-store’ } 
    [2] { revalidate :  0 } 
    [3] const revalidate = 0;


* router.refresh() :
    Send a new request to the server, refetch data and rerender the page 

* Hard navigation vs Soft Navigation ?
    Hard navigation : 
        On navigation, the cache is invalidated and the server refetches data and re-renders the changed segments.
    Soft Navigation: 
        On navigation, the cache for changed segments is reused (if it exists), and no new requests are made to the server for data.

- The push() and replace() methods will perform a soft navigation if the new route has been prefetched 
    ( for example when you check a box of todo list on item page and go back to home page by using push or replace method , 
    those method will do soft navigation so will use cached version of home page so the box of item on hime page will be unchecked not checked ) 
    This problem solved in newer versions on NextJS or before newer version use temporary solution by using prefetch={false} to each Link of item and to 
    Links on Home page but this solution will not work if you go back to home page by back button on browser works only when you press on home page link on item page 
    
    * note : to check data mutation , router.refresh and Hard navigation & Soft Navigation check ToDoList project 
        and ToDoList Project needs json server , to create json server : ( npx json-server -w db.json -p 3500 -H 127.0.0.1 )


