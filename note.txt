**** NextJs 13 ( Dave-Gary) *****
https://nextjs.org/docs


* why NextJs?
    1.Server-side rendering (SSR):  can improve website performance and user experience by pre-rendering pages and sending fully-formed HTML to the browser.
    2.Automatic code splitting: Next js automatically splits code into smaller chunks, making it easier to load and reducing the time it takes to load the site.
    3.SEO optimization
    4.Faster development: Next js includes many features that can speed up development, such as file-based routing, automatic code splitting, and built-in API routes.
    5.Great developer experience: Next js offers a great developer experience, including hot reloading, automatic code splitting, and easy integration with other popular technologies.
    6.Built-in support for TypeScript
    * note : Hot reload : is a feature that lets you inject updated source code into a running app. This means that you can see the effects of your code changes almost instantly, without waiting for the app to rebuild or relaunch.

* Hydration: 
    Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive.

* SSG ( static site generation ) vs Server-side Rendering : 
    -Static Generation (Recommended): The HTML is generated at build time and will be reused on each request.
    -Server-side Rendering: The HTML is generated on each request.
    * you can use both method and that called hybrid nextJs 

* CDN(content delivery network): 
    CDN is a network of servers linked together with the goal of delivering content as quickly, cheaply, reliably, and securely as possible.

* to insall nextJs : npx create-next-app@latest

* layout.tsx : any code will be written there will be applied to all pages ( in layout.tsx in app folder)
    each page can have specific layout so code inside it will be applied to this specific page only ( in layout.tsx in about folder ).

* Metadata : is availabe at layout.tsx and each page can have layout.tsx file inside it you can add different Metadata ( you can also add Metadata at page.tsx)

* loading : you can add loading.tsx file to any page folder and you will see it if page take too long for loading

* error handling : you can add error.tsx to any page folder and will render it when there is an error and will not crash all project

* Routes : 
    just create folder and the name of folder will be the route name then add page.tsx file inside it

* Dynamic Routes : 
    just create a folder and the name of the folder between [] ( like [userId] inside users folder) :

* types.d.ts : you can create this file and add all types you will need in project and you can use it directly without importing 

* Fetching Data : 
    - you can fetch data inside function inside page.tsx file but it's better for organization add those functions 
    inside lib folder and then import them like ( import getAllUsers from '@/lib/getAllUsers' )

    - in page.tsx of users folder :
        * we fetched data of user and rendered the users name
        * we added Metadata directly at page.tsx
        * const usersData: Promise<User[]> = getAllUsers() 
            because getAllUsers() will return promise and we added <User[]> for types (User type from types.d.ts file)
    
    in page.tsx of [userId] : 
        * we created Dynamic Metadata (generateMetadata function and it's params is userId from Url )
        * we have 2 options to do 2 fetch requests : 
            [1] parallel ( use Promise.all([userData, userPostsData])) will fetch 2 request at same time
            [2] Suspense to progressively render a page and show a result to the user while the rest of the content loads 
                steps of option 2 : 
                    [a] import { Suspense } from "react"
                    [b] wrap the UserPosts component with Suspense component and pass the Promise as prop
                    * note : Suspense component can accept a fallback prop to render it when loading ( fallback={<h2>Loading...</h2>}) 

        * note : in option 1 we will fetch userData, userPostsData at same time so maybe will take a long time
        so option 2 is better because you will fetch userData first to show user.name and Suspense userPostsData to show userPosts when it ready



    